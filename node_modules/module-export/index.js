const deepAssign = require('deep-assign');

const moduleWrapper = (_module, defaultExport, keepOldExports, allWarnings) => {
    const self = function (obj, privateExport) {
        if (privateExport && !moduleWrapper.arePrivateExportsEnabled()) {
            return self;
        }

        if (self.exports) {
            if (self.getOption('debug')) {
                console.info('Merging exports.');
            }

            deepAssign(self.exports, obj);
        } else {
            if (self.getOption('debug')) {
                console.info('Nothing was exported already, copying export.');
            }

            self.exports = obj;
        }

        return self;
    };

    const options = {
        debug: false
    };

    self.getOption = key => {
        return options[key];
    };

    self.setOption = (key, value) => {
        options[key] = value;

        if (self.getOption('debug')) {
            console.info(`Set option '${key}' to '${value}'.`);
        }
    };

    Object.defineProperties(self, {
        Module: {
            value: _module,
            writable: false
        },
        exports: {
            get: () => {
                return _module.exports;
            },
            set: value => {
                _module.exports = value;
            }
        }
    });

    if (keepOldExports !== true) {
        if (allWarnings) {
            console.warn('Wiping any existing exports prior to module wrap.');
        }

        self.exports = null;
    }

    self.exports = (defaultExport || self.exports);

    self.export = self;

    self.exportDefault = obj => {
        const old = self.exports;

        if (typeof old !== 'object') {
            console.warn(`Overwriting default export of type '${typeof old}'.`);
        }

        self.exports = obj;
        self.export(old);
    };

    const KEY_TEST_EXPORTS = 'PRIVATE_EXPORTS_ENABLED';

    moduleWrapper.arePrivateExportsEnabled = () => {
        return (process.env[KEY_TEST_EXPORTS] === 'true');
    };

    moduleWrapper.enablePrivateExports = () => {
        console.info('Enabling private exports.');
        process.env[KEY_TEST_EXPORTS] = true;
    };

    moduleWrapper.disablePrivateExports = () => {
        console.info('Disabling private exports.');
        process.env[KEY_TEST_EXPORTS] = false;
    };

    return self;
};

const moduleExport = moduleWrapper(module, moduleWrapper);

moduleExport({
    ModuleExport: moduleWrapper
});
